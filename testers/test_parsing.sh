#!/bin/bash

# =============================================================================
# Test de Parsing - FDF
# =============================================================================
# Pruebas espec√≠ficas para el parsing de archivos .fdf

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables
PROJECT_DIR=".."
EXECUTABLE="$PROJECT_DIR/fdf"
TOTAL_TESTS=0
PASSED_TESTS=0

# Funci√≥n para imprimir resultados
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
        ((PASSED_TESTS++))
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
    ((TOTAL_TESTS++))
}

# Funci√≥n para crear mapas de prueba
create_test_maps() {
    echo -e "${CYAN}üìù Creando mapas de prueba...${NC}"
    
    # Mapa v√°lido simple
    cat > test_simple.fdf << EOF
0 0 0
0 1 0
0 0 0
EOF

    # Mapa v√°lido con alturas variadas
    cat > test_heights.fdf << EOF
0 1 2 3 4
1 2 3 4 5
2 3 4 5 6
3 4 5 6 7
4 5 6 7 8
EOF

    # Mapa v√°lido grande
    cat > test_large.fdf << EOF
0 0 0 0 0 0 0 0 0 0
0 1 1 1 1 1 1 1 1 0
0 1 2 2 2 2 2 2 1 0
0 1 2 3 3 3 3 2 1 0
0 1 2 3 4 4 3 2 1 0
0 1 2 3 4 4 3 2 1 0
0 1 2 3 3 3 3 2 1 0
0 1 2 2 2 2 2 2 1 0
0 1 1 1 1 1 1 1 1 0
0 0 0 0 0 0 0 0 0 0
EOF

    # Mapa con valores negativos
    cat > test_negative.fdf << EOF
-2 -1 0
-1 0 1
0 1 2
EOF

    # Mapa con valores grandes
    cat > test_large_values.fdf << EOF
1000 2000 3000
2000 3000 4000
3000 4000 5000
EOF

    # Mapa rectangular (no cuadrado)
    cat > test_rectangular.fdf << EOF
0 1 2 3 4
1 2 3 4 5
EOF

    # Mapa con una sola l√≠nea
    cat > test_single_line.fdf << EOF
0 1 2 3 4 5 6 7 8 9
EOF

    # Mapa con una sola columna
    cat > test_single_column.fdf << EOF
0
1
2
3
4
EOF

    # Mapa inv√°lido - archivo vac√≠o
    touch test_empty.fdf

    # Mapa inv√°lido - formato inconsistente
    cat > test_inconsistent.fdf << EOF
0 1 2
0 1
0 1 2 3
EOF

    # Mapa inv√°lido - caracteres no num√©ricos
    cat > test_invalid_chars.fdf << EOF
0 a 2
1 2 3
0 1 2
EOF

    # Mapa inv√°lido - caracteres especiales
    cat > test_special_chars.fdf << EOF
0 1 2
1 @ 3
2 3 4
EOF

    # Mapa inv√°lido - espacios extra
    cat > test_extra_spaces.fdf << EOF
0  1  2
1  2  3
2  3  4
EOF

    # Mapa inv√°lido - l√≠neas vac√≠as en medio
    cat > test_empty_lines.fdf << EOF
0 1 2

1 2 3
2 3 4
EOF

    echo -e "${GREEN}‚úÖ Mapas de prueba creados${NC}"
}

# Funci√≥n para probar mapas v√°lidos
test_valid_maps() {
    echo -e "\n${BLUE}üîç Probando mapas v√°lidos...${NC}"
    
    for map in test_simple.fdf test_heights.fdf test_large.fdf test_negative.fdf \
               test_large_values.fdf test_rectangular.fdf test_single_line.fdf \
               test_single_column.fdf; do
        if [ -f "$map" ]; then
            timeout 10s "$EXECUTABLE" "$map" > /dev/null 2>&1
            print_result $? "Parsing de $map"
        fi
    done
}

# Funci√≥n para probar mapas inv√°lidos
test_invalid_maps() {
    echo -e "\n${BLUE}üîç Probando mapas inv√°lidos...${NC}"
    
    for map in test_empty.fdf test_inconsistent.fdf test_invalid_chars.fdf \
               test_special_chars.fdf test_extra_spaces.fdf test_empty_lines.fdf; do
        if [ -f "$map" ]; then
            timeout 10s "$EXECUTABLE" "$map" > /dev/null 2>&1
            # Deber√≠a fallar para archivos inv√°lidos
            if [ $? -ne 0 ]; then
                print_result 0 "Parsing inv√°lido de $map (fall√≥ correctamente)"
            else
                print_result 1 "Parsing inv√°lido de $map (no fall√≥ como esperado)"
            fi
        fi
    done
}

# Funci√≥n para probar casos edge
test_edge_cases() {
    echo -e "\n${BLUE}üîç Probando casos edge...${NC}"
    
    # Mapa con valores muy grandes
    cat > test_very_large.fdf << EOF
999999999 999999999 999999999
999999999 999999999 999999999
999999999 999999999 999999999
EOF
    
    timeout 10s "$EXECUTABLE" test_very_large.fdf > /dev/null 2>&1
    print_result $? "Valores muy grandes"
    
    # Mapa con valores muy peque√±os
    cat > test_very_small.fdf << EOF
-999999999 -999999999 -999999999
-999999999 -999999999 -999999999
-999999999 -999999999 -999999999
EOF
    
    timeout 10s "$EXECUTABLE" test_very_small.fdf > /dev/null 2>&1
    print_result $? "Valores muy peque√±os"
    
    # Mapa con muchos espacios
    cat > test_many_spaces.fdf << EOF
0    1    2    3
1    2    3    4
2    3    4    5
3    4    5    6
EOF
    
    timeout 10s "$EXECUTABLE" test_many_spaces.fdf > /dev/null 2>&1
    print_result $? "Muchos espacios"
    
    # Mapa con tabs
    cat > test_with_tabs.fdf << EOF
0	1	2	3
1	2	3	4
2	3	4	5
3	4	5	6
EOF
    
    timeout 10s "$EXECUTABLE" test_with_tabs.fdf > /dev/null 2>&1
    print_result $? "Con tabs"
}

# Funci√≥n para probar archivos inexistentes
test_nonexistent_files() {
    echo -e "\n${BLUE}üîç Probando archivos inexistentes...${NC}"
    
    timeout 10s "$EXECUTABLE" "archivo_que_no_existe.fdf" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        print_result 0 "Archivo inexistente (fall√≥ correctamente)"
    else
        print_result 1 "Archivo inexistente (no fall√≥ como esperado)"
    fi
    
    timeout 10s "$EXECUTABLE" "" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        print_result 0 "Sin argumentos (fall√≥ correctamente)"
    else
        print_result 1 "Sin argumentos (no fall√≥ como esperado)"
    fi
}

# Funci√≥n para probar archivos con extensi√≥n incorrecta
test_wrong_extension() {
    echo -e "\n${BLUE}üîç Probando extensiones incorrectas...${NC}"
    
    # Crear archivo con extensi√≥n incorrecta
    cat > test_wrong_ext.txt << EOF
0 1 2
1 2 3
2 3 4
EOF
    
    timeout 10s "$EXECUTABLE" test_wrong_ext.txt > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        print_result 0 "Extensi√≥n incorrecta (fall√≥ correctamente)"
    else
        print_result 1 "Extensi√≥n incorrecta (no fall√≥ como esperado)"
    fi
}

# Funci√≥n para probar archivos con permisos incorrectos
test_permission_issues() {
    echo -e "\n${BLUE}üîç Probando problemas de permisos...${NC}"
    
    # Crear archivo sin permisos de lectura
    cat > test_no_permission.fdf << EOF
0 1 2
1 2 3
2 3 4
EOF
    
    chmod 000 test_no_permission.fdf
    
    timeout 10s "$EXECUTABLE" test_no_permission.fdf > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        print_result 0 "Sin permisos de lectura (fall√≥ correctamente)"
    else
        print_result 1 "Sin permisos de lectura (no fall√≥ como esperado)"
    fi
    
    # Restaurar permisos
    chmod 644 test_no_permission.fdf
}

# Funci√≥n para limpiar archivos temporales
cleanup() {
    rm -f test_*.fdf test_*.txt
}

# Funci√≥n para generar reporte
generate_report() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}Reporte de Pruebas de Parsing${NC}"
    echo -e "${BLUE}========================================${NC}"
    
    echo -e "${CYAN}üìä Estad√≠sticas:${NC}"
    echo -e "   Total de pruebas: $TOTAL_TESTS"
    echo -e "   ${GREEN}‚úÖ Exitosas: $PASSED_TESTS${NC}"
    echo -e "   ${RED}‚ùå Fallidas: $((TOTAL_TESTS - PASSED_TESTS))${NC}"
    
    if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
        echo -e "\n${GREEN}üéâ ¬°Todas las pruebas de parsing pasaron!${NC}"
    else
        echo -e "\n${RED}‚ö†Ô∏è  Algunas pruebas de parsing fallaron${NC}"
    fi
    
    # Calcular porcentaje de √©xito
    if [ $TOTAL_TESTS -gt 0 ]; then
        SUCCESS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
        echo -e "\n${BLUE}üìà Tasa de √©xito: $SUCCESS_RATE%${NC}"
    fi
}

# Funci√≥n principal
main() {
    echo -e "${CYAN}üß™ Iniciando pruebas de parsing para FDF...${NC}"
    
    # Verificar que el ejecutable existe
    if [ ! -f "$EXECUTABLE" ]; then
        echo -e "${RED}‚ùå Error: $EXECUTABLE no encontrado${NC}"
        echo -e "${YELLOW}üí° Ejecuta 'make' en el directorio principal primero${NC}"
        exit 1
    fi
    
    # Crear mapas de prueba
    create_test_maps
    
    # Ejecutar todas las pruebas
    test_valid_maps
    test_invalid_maps
    test_edge_cases
    test_nonexistent_files
    test_wrong_extension
    test_permission_issues
    
    # Generar reporte
    generate_report
    
    # Limpiar archivos temporales
    cleanup
    
    echo -e "\n${CYAN}üèÅ Pruebas de parsing completadas${NC}"
}

# Ejecutar funci√≥n principal
main "$@" 